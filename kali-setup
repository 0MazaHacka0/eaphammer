#!/usr/bin/env python
import os

from settings import settings

def read_deps_file(deps_file):
    with open(deps_file) as fd:
        return ' '.join([ line.strip() for line in fd ])

if __name__ == '__main__':
                    

    default_wordlist = os.path.join(settings.dict['paths']['directories']['wordlists'], settings.dict['core']['eaphammer']['general']['default_wordlist'])

    wordlist_source = settings.dict['core']['eaphammer']['general']['wordlist_source']

    local_dir = settings.dict['paths']['directories']['local']

    openssl_source = settings.dict['core']['eaphammer']['general']['openssl_source']
    openssl_version = settings.dict['core']['eaphammer']['general']['openssl_version']
    openssl_build_options = settings.dict['core']['eaphammer']['general']['openssl_build_options']
    openssl_build_prefix = os.path.join(local_dir, 'openssl/local')

    if raw_input('Do you want update your package list ("apt -y update")(recommended)? [y/N]: ').lower() == 'y':
        print '\n[*] Downloading package lists from kali repositories...\n'
        os.system('apt -y update')
    print '\n[*] complete!\n'

    if raw_input('Do you want upgrade your installed packages ("apt -y upgrade")(recommended)? [y/N]: ').lower() == 'y':
        print '\n[*] Performing upgrade...\n'
        os.system('apt -y upgrade')
    print '\n[*] complete!\n'

    print '\n[*] Installing Kali dependencies...\n'
    os.system('apt -y install %s' % read_deps_file('kali-dependencies.txt'))
    print '\n[*] complete!\n'

    print '\n[*] Installing Python dependencies...\n'
    os.system('pip install -r pip.req')
    print '\n[*] complete!\n'

    print '\n[*] Downloading OpenSSL_{}...\n'.format(openssl_version.replace('.', '_'))
    os.system('wget {} -O {}/openssl.tar.gz'.format(openssl_source, local_dir))
    print '\n[*] complete!\n'

    print '\n[*] Extracting OpenSSL_{}...\n'.format(openssl_version.replace('.', '_'))
    os.system('cd {} && tar xzf openssl.tar.gz'.format(local_dir))
    os.system('mv {}/openssl-OpenSSL_{} {}/openssl'.format(local_dir, openssl_version.replace('.', '_'), local_dir))
    os.system('cd {} && rm -f openssl.tar.gz'.format(local_dir))
    print '\n[*] complete!\n'

    print '\n[*] Compiling OpenSSL locally to avoid interfering with system install...\n'
    os.system('cd {}/openssl && ./config --prefix={} enable-ssl2 enable-ssl3 enable-ssl3-method enable-des enable-rc4 enable-weak-ssl-ciphers no-shared'.format(local_dir, openssl_build_prefix))
    os.system('cd {}/openssl && make'.format(local_dir))
    os.system('cd {}/openssl && make install_sw'.format(local_dir))
    print '\n[*] complete!\n'

    print '\n[*] Compiling hostapd...\n'
    os.system("cd %s && make hostapd-eaphammer_lib" % settings.dict['paths']['directories']['hostapd'])
    print '\n[*] complete!\n'

    print '\n[*] Compiling hcxtools...\n'
    os.system("cd %s && make" % settings.dict['paths']['directories']['hcxtools'])
    print '\n[*] complete!\n'

    print '\n[*] Compiling hcxdumptool...\n'
    os.system("cd %s && make" % settings.dict['paths']['directories']['hcxdumptool'])
    print '\n[*] complete!\n'

    print '\n[*] Downloading default wordlist...\n'
    os.system("wget %s -O %s.tar.gz" % (wordlist_source, default_wordlist))
    print '\n[*] complete!\n'

    print '\n[*] Extracting default wordlist...\n'
    os.system("cd %s && tar xzf %s.tar.gz" % (settings.dict['paths']['directories']['wordlists'], default_wordlist))
    print '\n[*] complete!\n'
